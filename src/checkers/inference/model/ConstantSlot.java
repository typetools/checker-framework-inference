package checkers.inference.model;

import javax.lang.model.element.AnnotationMirror;

import annotations.io.ASTPath;

/**
 * Represents variables, literals, etc... that have an inherent meaning in the type-system for which we
 * are inferring values.
 *
 * E.g. int literals, or primitive types are always NonNull in the Nullness type system.  Their values
 * will be represented by a ConstantSlot( @NonNull )
 *
 */
public class ConstantSlot extends Slot {

    private AnnotationMirror value;

    /**
    * @param value   The actual AnnotationMirror that this Constant represents.  This AnnotationMirror should
    *                be valid within the type system for which we are inferring values.
    */
    public ConstantSlot(AnnotationMirror value) {
        this.setValue(value);
    }

    /**
     * @param astPath Used to locate this constant in code, astPath should point to the tree that has the inherent
     *                constant value
     *                class MyClass {  String s = "a";  }
     *
     *                The ASTPath for the ConstantSlot( NonNull ) generated by "a" would be the path from the root of
     *                the compilation unit to the tree "a"
     *
     *                Note: For now, ConstantSlot ASTPaths are used solely for debugging purposes, as ConstantSlot
     *                annotations never need to be inserted into Jaif Files
     *
     * @param value   The actual AnnotationMirror that this ConstantSlot represents.  This AnnotationMirror should
     *                be valid within the type system for which we are inferring values.
     */
    public ConstantSlot(ASTPath astPath, AnnotationMirror value) {
        super(astPath);
        this.value = value;
    }

    @Override
    public Object serialize(Serializer serializer) {
        return serializer.serialize(this);
    }
    
    public AnnotationMirror getValue() {
        return value;
    }

    public void setValue(AnnotationMirror value) {
        this.value = value;
    } 
}
